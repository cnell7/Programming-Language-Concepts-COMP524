#lang racket
(module+ test
  (require (only-in rackunit
                    check-equal?))
  )

(check-equal? (lex "(define factorial
  (fun (n)
    (if (< n 0.9)
        1  ;; base case
        (factorial (- n 1) ;* recursive case *; ))))

(print (+ \"5! is \" (factorial 5)))") (list
 (list 'OPAREN #f)
 (list 'NAME 'define)
 (list 'NAME 'factorial)
 (list 'OPAREN #f)
 (list 'NAME 'fun)
 (list 'OPAREN #f)
 (list 'NAME 'n)
 (list 'CPAREN #f)
 (list 'OPAREN #f)
 (list 'NAME 'if)
 (list 'OPAREN #f)
 (list 'NAME '<)
 (list 'NAME 'n)
 (list 'FLOAT 0.9)
 (list 'CPAREN #f)
 (list 'INT 1)
 (list 'OPAREN #f)
 (list 'NAME 'factorial)
 (list 'OPAREN #f)
 (list 'NAME '-)
 (list 'NAME 'n)
 (list 'INT 1)
 (list 'CPAREN #f)
 (list 'CPAREN #f)
 (list 'CPAREN #f)
 (list 'CPAREN #f)
 (list 'CPAREN #f)
 (list 'OPAREN #f)
 (list 'NAME 'print)
 (list 'OPAREN #f)
 (list 'NAME '+)
 (list 'STRING "5! is ")
 (list 'OPAREN #f)
 (list 'NAME 'factorial)
 (list 'INT 5)
 (list 'CPAREN #f)
 (list 'CPAREN #f)
 (list 'CPAREN #f)))